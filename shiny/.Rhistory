hist(averages, breaks=20, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
curve(dnorm(x,0,1), 1,10, col="red", add=TRUE)
curve(dnorm(x,0,1), 2, 8, col="red", add=TRUE)
hist(averages, breaks=20, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
curve(dnorm(x,0,1), 2, 8, col="red", add=TRUE)
x <- dnorm(x,0,1)
?dnorm
curve(dnorm(x,0,1), 5, 5, col="red", add=TRUE)
hist(averages, breaks=20, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
curve(dnorm(x,0,1), 5, 5, col="red", add=TRUE)
?dnorm
?curve
curve(dnorm(x, 5, 5), 2, 8, col="red", add=TRUE)
curve(dnorm(x, 5, 1), 2, 8, col="red", add=TRUE)
hist(averages, breaks=20, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
curve(dnorm(x, 5, 1), 2, 8, col="red", add=TRUE)
?curve
curve(dnorm(x, 5, 1), 1, 10, col="red", add=TRUE)
hist(averages, breaks=20, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
curve(dnorm(x, 5, 1), 1, 10, col="red", add=TRUE)
hist(averages, breaks=100, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
curve(dnorm(x, 5, 1), 1, 10, col="red", add=TRUE)
hist(averages, breaks=50, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
curve(dnorm(x, 5, 1), 1, 10, col="red", add=TRUE)
```{r sample_normality}
hist(averages, breaks=50, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
curve(dnorm(x, emean, esd), 1, 10, col="red", add=TRUE)
curve(dnorm(x, emean, 1), 1, 10, col="red", add=TRUE)
hist(not_normal, breaks=50, main="Sample Means, n=1, reps=1000", xlab="Sample Mean", freq=FALSE)
curve(dnorm(x, 5, 1), 1, 10, col="red", add=TRUE)
?curve
?dnorm
?abline
hist(averages, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
abline(v=5)
abline(v=5, col="red")
hist(averages, breaks=50, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
abline(v=5, col="red")
hist(averages, breaks=25, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
abline(v=5, col="red")
hist(averages, breaks=25, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
abline(v=sample_mean, col="red")
abline(v=pop_mean, col="blue")
sample_mean <- mean(averages)
# compare to the population mean
pop_mean <- 1/lambda
hist(averages, breaks=25, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
abline(v=sample_mean, col="red")
abline(v=pop_mean, col="blue")
hist(averages, breaks=50, main="Sample Means, n=40, reps=1000", xlab="Sample Mean", freq=FALSE)
curve(dnorm(x, mean=1/lambda, sd=1), 1, 10, col="red", add=TRUE)
library("ggplot2")
library("datasets")
data(ToothGrowth)
data("ToothGrowth")
head(ToothGrowth)
summary(ToothGrowth)
str(ToothGrowth)
ggplot(ToothGrowth, aes(len, dose)) + geom_point(aes(color=supp))
?ToothGrowth
ggplot(ToothGrowth, aes(len, dose)) + geom_boxplot(aes(color=supp))
?geom_boxplot
ggplot(ToothGrowth, aes(len, dose, fill=supp)) + geom_boxplot()
ggplot(ToothGrowth, aes(dose, len)) + geom_boxplot()
ggplot(ToothGrowth, aes(dose, len, fill=supp)) + geom_boxplot()
summary(ToothGrowth)
ggplot(ToothGrowth, aes(factor(dose), len, fill=supp)) + geom_boxplot()
aggregate(dose~len, ToothGrowth, length)
aggregate(dose~len, ToothGrowth, sum)
aggregate(len~dose, ToothGrowth, sum)
?t.test
t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
eqvar <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
eqvar$conf
eqvar$conf.level
eqvar$conf[1]
eqvar$conf[1:32]
eqvar$conf[1:2]
eqint <- eqvar$conf[1:2]
uneqvar <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
uneqint <- uneqvar$conf[1:2]
eqvar$p
eqvar$p.value
uneqp <- uneqvar$p.value
eqp <- eqvar$p.value
compare <- data.frame(c(eqp, eqint), c(uneqp, uneqint))
compare
c(eqp, eqint)''
c(eqp, eqint)
compare <- rbind(c(eqp, eqint),c(uneqp, uneqint))
compare
compare <- data.frame(rbind(c(eqp, eqint),c(uneqp, uneqint)))
eqvar <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
uneqvar <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
compare <- data.frame( rbind( c(eqvar$p.value, eqvar$conf[1:2]), c(uneqvar$p.value, uneqvar$conf[1:2])) )
compare
eqvar <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
uneqvar <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
compare <- data.frame( rbind( c(eqvar$p.value, eqvar$conf[1:2]), c(uneqvar$p.value, uneqvar$conf[1:2])) )
colnames(compare) <- c("p.value", "conf.low", "conf.high")
row.names(compare) <- c("equal variance", "unequal variance")
compare
eqvard <- t.test(len~dose, paired=F, var.equal=T, data=ToothGrowth)
uneqvard <- t.test(len~dose, paired=F, var.equal=F, data=ToothGrowth)
str(ToothGrowth)
ToothGrowth.1 <- ToothGrowth[ToothGrowth$dose!="2", ]
eqvard <- t.test(len~dose, paired=F, var.equal=T, data=ToothGrowth.1)
uneqvard <- t.test(len~dose, paired=F, var.equal=F, data=ToothGrowth.1)
compared <- data.frame( rbind( c(eqvard$p.value, eqvard$conf[1:2]), c(uneqvard$p.value, uneqvard$conf[1:2])) )
colnames(compared) <- c("p.value", "conf.low", "conf.high")
row.names(compared) <- c("equal variance", "unequal variance")
compared
eqvar.1 <- t.test(len~dose, paired=F, var.equal=T, data=ToothGrowth.1)
uneqvar.1 <- t.test(len~dose, paired=F, var.equal=F, data=ToothGrowth.1)
compare.1 <- data.frame( rbind( c(eqvar.1$p.value, eqvar.1$conf[1:2], "0.5 to 1"), c(uneqvar.1$p.value, uneqvar.1$conf[1:2],  "0.5 to 1")) )
colnames(compare.1) <- c("p.value", "conf.low", "conf.high", "dose")
row.names(compare.1) <- c("equal variance", "unequal variance")
compare.1
# 1 and 2
ToothGrowth.3 <- ToothGrowth[ToothGrowth$dose!="0.5", ]
eqvar.3 <- t.test(len~dose, paired=F, var.equal=T, data=ToothGrowth.2)
uneqvar.3 <- t.test(len~dose, paired=F, var.equal=F, data=ToothGrowth.2)
compare.3 <- data.frame( rbind( c(eqvar.3$p.value, eqvar.3$conf[1:2], "1 to 2"), c(uneqvar.3$p.value, uneqvar.3$conf[1:2],  "1 to 2")) )
colnames(compare.3) <- c("p.value", "conf.low", "conf.high", "dose")
row.names(compare.3) <- c("equal variance", "unequal variance")
ToothGrowth.3 <- ToothGrowth[ToothGrowth$dose!="0.5", ]
eqvar.3 <- t.test(len~dose, paired=F, var.equal=T, data=ToothGrowth.3)
uneqvar.3 <- t.test(len~dose, paired=F, var.equal=F, data=ToothGrowth.3)
compare.3 <- data.frame( rbind( c(eqvar.3$p.value, eqvar.3$conf[1:2], "1 to 2"), c(uneqvar.3$p.value, uneqvar.3$conf[1:2],  "1 to 2")) )
colnames(compare.3) <- c("p.value", "conf.low", "conf.high", "dose")
row.names(compare.3) <- c("equal variance", "unequal variance")
compare.3
doses <- rbind(compare.1, compare.2, compare.3)
eqvar <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
uneqvar <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
compare <- data.frame( rbind( c(eqvar$p.value, eqvar$conf[1:2]), c(uneqvar$p.value, uneqvar$conf[1:2])) )
colnames(compare) <- c("p.value", "conf.low", "conf.high")
row.names(compare) <- c("equal variance", "unequal variance")
compare
# 0.5 and 1
ToothGrowth.1 <- ToothGrowth[ToothGrowth$dose!="2", ]
eqvar.1 <- t.test(len~dose, paired=F, var.equal=T, data=ToothGrowth.1)
uneqvar.1 <- t.test(len~dose, paired=F, var.equal=F, data=ToothGrowth.1)
compare.1 <- data.frame( rbind( c(eqvar.1$p.value, eqvar.1$conf[1:2], "0.5 to 1"), c(uneqvar.1$p.value, uneqvar.1$conf[1:2],  "0.5 to 1")) )
colnames(compare.1) <- c("p.value", "conf.low", "conf.high", "dose")
row.names(compare.1) <- c("equal variance", "unequal variance")
# 0.5 and 2
ToothGrowth.2 <- ToothGrowth[ToothGrowth$dose!="1", ]
eqvar.2 <- t.test(len~dose, paired=F, var.equal=T, data=ToothGrowth.2)
uneqvar.2 <- t.test(len~dose, paired=F, var.equal=F, data=ToothGrowth.2)
compare.2 <- data.frame( rbind( c(eqvar.2$p.value, eqvar.2$conf[1:2], "0.5 to 2"), c(uneqvar.2$p.value, uneqvar.2$conf[1:2],  "0.5 to 2")) )
colnames(compare.2) <- c("p.value", "conf.low", "conf.high", "dose")
row.names(compare.2) <- c("equal variance", "unequal variance")
# 1 and 2
ToothGrowth.3 <- ToothGrowth[ToothGrowth$dose!="0.5", ]
eqvar.3 <- t.test(len~dose, paired=F, var.equal=T, data=ToothGrowth.3)
uneqvar.3 <- t.test(len~dose, paired=F, var.equal=F, data=ToothGrowth.3)
compare.3 <- data.frame( rbind( c(eqvar.3$p.value, eqvar.3$conf[1:2], "1 to 2"), c(uneqvar.3$p.value, uneqvar.3$conf[1:2],  "1 to 2")) )
colnames(compare.3) <- c("p.value", "conf.low", "conf.high", "dose")
row.names(compare.3) <- c("equal variance", "unequal variance")
doses <- rbind(compare.1, compare.2, compare.3)
doses
source('~/.active-rstudio-document', echo=TRUE)
setwd("COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/GDN")
setwd("VOL/COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/GDN")
getwd()
setwd("/Volumes/COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/GDN")
source('~/.active-rstudio-document', echo=TRUE)
ctr_dates_means <- aggregate(CTR~End.Date, gdn, mean)
ctr_dates_means
ggplot(gdn, aes(End.Date, CTR)) + geom_boxplot(aes(fill=Ad.Campaign)) + stat_summary(fun.y=mean, geom="point", shape=5, size=4) + labs(title="CTR by Ad.Campaign") + scale_fill_brewer(palette="Paired")
date.a <- ggplot(ctr_dates_means, aes(End.Date, CTR)) + geom_bar(stat="identity", aes(fill=Ad.Campaign)) + ylim(c(0,  .5)) + labs(title="Avg. CTR by Ad.Campaign") + scale_fill_brewer(palette="Paired")
date.a
date.a <- ggplot(ctr_dates_means, aes(End.Date, CTR)) + geom_bar(stat="identity", aes(fill=End.Date)) + ylim(c(0,  .5)) + labs(title="Avg. CTR by Ad.Campaign") + scale_fill_brewer(palette="Paired")
datea.
date.a
date.a <- ggplot(ctr_dates_means, aes(End.Date, CTR)) + geom_bar(stat="identity") + ylim(c(0,  .5)) + labs(title="Avg. CTR by Ad.Campaign") + scale_fill_brewer(palette="Paired")
date.a
n <- aggregate(CTR~Logo+Size, gdn, means)
n <- aggregate(CTR~Logo+Size, gdn, mean)
n
n <- aggregate(CTR~Logo+Audience, gdn, mean)
n
logo_by_aud <- aggregate(CTR~Logo+Audience, gdn, mean)
logo.aud.a <- ggplot(logo_by_aud, aes(Logo, CTR)) + geom_bar(stat="identity", aes(fill=Audience)) + ylim(c(0, .5)) + labs(title="Avg. CTR by logo presence") + scale_fill_brewer(palette="Paired")
logo.aud.a
logo.aud.a <- ggplot(logo_by_aud, aes(Logo, CTR)) + geom_bar(stat="identity", position="dodge", aes(fill=Audience)) + labs(title="Avg. CTR by logo presence") + scale_fill_brewer(palette="Paired")
logo.aud.a
logo.aud.a <- ggplot(logo_by_aud, aes(Audience, CTR)) + geom_bar(stat="identity", position="dodge", aes(fill=Logo)) + labs(title="Avg. CTR by logo presence") + scale_fill_brewer(palette="Paired")
logo.aud.a
logo.aud.b <- ggplot(gdn, aes(Audience, CTR)) + geom_boxplot(aes(fill=Logo)) + stat_summary(fun.y=mean, geom="point", shape=5, size=4) + labs(title="CTR by logo presence") + scale_fill_brewer(palette="Paired")
logo.aud.b
gdn
gdn[, c(2,8,9)]
gdn[, c(1,8,9)]
aggregate(Ad.Campaign~Audience+Start.Date+End.Date, gdn, sum)
aggregate(Ad.Campaign~Audience+Start.Date+End.Date, gdn, length)
aggregate(Ad.Campaign~Ad.Campaign+Audience+Start.Date+End.Date, gdn, length)
aggregate(CTR~Ad.Campaign+Audience+Start.Date+End.Date, gdn, length)
logo_size <- aggregate(CTR~Logo+Size, gdn, mean)
logo_size <- aggregate(CTR~Logo+Size, gdn, mean)
logo.size.a <- ggplot(logo_size, aes(Size, CTR)) + geom_bar(stat="identity", position="dodge", aes(fill=Logo)) + labs(title="Avg. CTR by size and logo") + scale_fill_brewer(palette="Paired")
logo.size.b <- ggplot(gdn, aes(Size, CTR)) + geom_boxplot(aes(fill=Logo)) + stat_summary(fun.y=mean, geom="point", shape=5, size=4) + labs(title="CTR by size and logo") + scale_fill_brewer(palette="Paired")
grid.arrange(logo.size.a, logo.size.b, ncol=2)
logo_size
logo_size <- logo_size[logo_size$Size=="300 x 250", ]
logo.size.a <- ggplot(logo_size, aes(Size, CTR)) + geom_bar(stat="identity", position="dodge", aes(fill=Logo)) + labs(title="Avg. CTR by size and logo") + scale_fill_brewer(palette="Paired")
logo.size.b <- ggplot(gdn, aes(Size, CTR)) + geom_boxplot(aes(fill=Logo)) + stat_summary(fun.y=mean, geom="point", shape=5, size=4) + labs(title="CTR by size and logo") + scale_fill_brewer(palette="Paired")
grid.arrange(logo.size.a, logo.size.b, ncol=2)
gdn
false <- gdn[gdn$Logo=="FALSE",]
false
mb <- gdn[gdn$Size=="320 x 50", ]
mb
square <- gdn[gdn$Size=="300 x 250", ]
logo.size.b <- ggplot(square, aes(Size, CTR)) + geom_boxplot(aes(fill=Logo)) + stat_summary(fun.y=mean, geom="point", shape=5, size=4) + labs(title="CTR by size and logo") + scale_fill_brewer(palette="Paired")
grid.arrange(logo.size.a, logo.size.b, ncol=2)
square
gdn
a <- gdn[gdn$Apply.is.first.word=="TRUE", ]
a
aggregate(Apply.is.first.word~Size, gdn, length)
aggregate(CTR~Apply.is.first.word+Size, gdn, length)
gdn
source('~/.active-rstudio-document', echo=TRUE)
head(applyFull)
source('~/.active-rstudio-document', echo=TRUE)
head(applyFull)
setwd("/Volumes/COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Final Reports/Google Display Network 14-15")
adGroups <- read.csv("Data/adwords_0150114-072815.csv", stringsAsFactors=FALSE)
for (i in 9:10) adGroups[,i] <- as.Date(adGroups[,i], format="%m/%d/%y")
source('~/.active-rstudio-document', echo=TRUE)
head(total)
head(adTable)
head(adGroups)
str(adGroups)
ggplot(adGroups, aes(Ad.Group, CTR)) + geom_histogram
ggplot(adGroups, aes(Ad.Group, CTR)) + geom_histogram(stat="identity")
ggplot(adGroups, aes(Ad.group, CTR)) + geom_histogram(stat="identity")
ggplot(adGroups, aes(Ad.group, CTR)) + geom_histogram(stat="identity")+ theme(panel.background=element_blank(), axis.text.x = element_text(angle=90, hjust = 1))
pd <- adGroups[adGroups$Type=="Priority Date", ]
pd
ggplot(pd, aes(Ad.group, CTR, ymax=1, fill=Type)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=25, hjust = 1)) + labs(title="oooo", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=value), size=3, position=position_dodge(width=.9), vjust=-2)
ggplot(pd, aes(Ad.group, CTR, ymax=1, fill=Type)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=25, hjust = 1)) + labs(title="oooo", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=CTR), size=3, position=position_dodge(width=.9), vjust=-2)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(pd, aes(Ad.group, CTR, ymax=1, fill=Type)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=25, hjust = 1)) + labs(title="oooo", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=CTR), size=3, position=position_dodge(width=.9), vjust=-2)
ggplot(pd, aes(Ad.group, CTR, ymax=1, fill=Ad.group)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F3: Priority Date Click Through Rate by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=CTR), size=3, position=position_dodge(width=.9), vjust=-2)
ggplot(pd, aes(Ad.group, CTR, ymax=.75, fill=Ad.group)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F3: Priority Date Click Through Rate by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=CTR), size=3, position=position_dodge(width=.9), vjust=-2)
names(Pd)
names(pd)
ggplot(pd, aes(Ad.group, Avg..CPC, ymax=5, fill=Ad.group)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F3: Priority Date Click Through Rate by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=Avg..CPC), size=3, position=position_dodge(width=.9), vjust=-2)
ggplot(pd, aes(Ad.group, Avg..CPC, ymax=5, fill=Ad.group)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F3: Priority Date Cost per Click by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=Avg..CPC), size=3, position=position_dodge(width=.9), vjust=-2)
ggplot(pd, aes(Ad.group, Avg..CPC, ymax=3.5, fill=Ad.group)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F3: Priority Date Cost per Click by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=Avg..CPC), size=3, position=position_dodge(width=.9), vjust=-2)
pdCTR <- ggplot(pd, aes(Ad.group, CTR, ymax=.6, fill=Ad.group)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F3: Priority Date Click Through Rate by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=CTR), size=3, position=position_dodge(width=.9), vjust=-2)
pdCPC <- ggplot(pd, aes(Ad.group, Avg..CPC, ymax=3.5, fill=Ad.group)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F4: Priority Date Cost per Click by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=Avg..CPC), size=3, position=position_dodge(width=.9), vjust=-2)
grid.arrange(pdCTR, pdCPC, ncol=2)
ggplot(pd, aes(Ad.group, Avg..CPC, ymax=3.5, fill="lightblue")) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F4: Priority Date Cost per Click by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=Avg..CPC), size=3, position=position_dodge(width=.9), vjust=-2)
pdCPC <- ggplot(pd, aes(Ad.group, Avg..CPC, ymax=3.5)) + geom_bar(stat="identity", position="dodge",fill="lightblue") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F4: Priority Date Cost per Click by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=Avg..CPC), size=3, position=position_dodge(width=.9), vjust=-2)
pdCPC
pdCTR <- ggplot(pd, aes(Ad.group, CTR, ymax=.6) + geom_bar(stat="identity", position="dodge",fill="lightblue") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F3: Priority Date Click Through Rate by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=CTR), size=3, position=position_dodge(width=.9), vjust=-2)
pdCPC <- ggplot(pd, aes(Ad.group, Avg..CPC, ymax=3.5)) + geom_bar(stat="identity", position="dodge",fill="lightblue") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F4: Priority Date Cost per Click by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=Avg..CPC), size=3, position=position_dodge(width=.9), vjust=-2)
grid.arrange(pdCTR, pdCPC, ncol=2)
pdCTR <- ggplot(pd, aes(Ad.group, CTR, ymax=.6) + geom_bar(stat="identity", position="dodge", fill="lightblue") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F3: Priority Date Click Through Rate by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=CTR), size=3, position=position_dodge(width=.9), vjust=-2)
pdCTR <- ggplot(pd, aes(Ad.group, CTR, ymax=.6)) + geom_bar(stat="identity", position="dodge", fill="lightblue") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F3: Priority Date Click Through Rate by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=CTR), size=3, position=position_dodge(width=.9), vjust=-2)
pdCPC <- ggplot(pd, aes(Ad.group, Avg..CPC, ymax=3.5)) + geom_bar(stat="identity", position="dodge",fill="lightblue") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F4: Priority Date Cost per Click by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=Avg..CPC), size=3, position=position_dodge(width=.9), vjust=-2)
pdCTR <- ggplot(pd, aes(Ad.group, CTR, ymax=.6)) + geom_bar(stat="identity", position="dodge", fill="lightblue") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F3: Priority Date Click Through Rate by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=CTR), size=3, position=position_dodge(width=.9), vjust=-2)
pdCPC <- ggplot(pd, aes(Ad.group, Avg..CPC, ymax=3.5)) + geom_bar(stat="identity", position="dodge",fill="lightblue") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F4: Priority Date Cost per Click by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=Avg..CPC), size=3, position=position_dodge(width=.9), vjust=-2)
grid.arrange(pdCTR, pdCPC, ncol=2)
pdCTR <- ggplot(pd, aes(Ad.group, CTR, ymax=.6, fill=Type)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F3: Priority Date Click Through Rate by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=CTR), size=3, position=position_dodge(width=.9), vjust=-2)
pdCTR
pdCTR <- ggplot(pd, aes(Ad.group, CTR, ymax=.6, fill=Type)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F3: Priority Date Click Through Rate by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=CTR), size=3, position=position_dodge(width=.9), vjust=-2)
pdCPC <- ggplot(pd, aes(Ad.group, Avg..CPC, ymax=3.5, fill=Type)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=15, hjust = 1)) + labs(title="F4: Priority Date Cost per Click by Group", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=Avg..CPC), size=3, position=position_dodge(width=.9), vjust=-2)
grid.arrange(pdCTR, pdCPC, ncol=2)
ggplot(s, aes(variable, value, ymax=12500)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=25, hjust = 1)) + labs(title="F5: Total Cost", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=value), size=3, position=position_dodge(width=.9), vjust=-2)
s
Scost <- ggplot(s, aes(variable, value, ymax=12500, fill=Size)) + geom_bar(stat="identity", position="dodge") + theme(panel.background=element_blank(), axis.text.x = element_text(angle=25, hjust = 1)) + labs(title="F5: Total Cost", y="", x="") + scale_fill_brewer(palette="Paired") + geom_text(aes(label=value), size=3, position=position_dodge(width=.9), vjust=-2)
Scost
total
test <- function(x) -((x^2)/100) + (2*x)
test(100)
test(120)
test(150)
test(110)
test(90)
test(80)
test(70)
test(30)
table <- data.fame(x=c(1:200))
table <- data.frame(x=c(1:200))
table$height <- test(table$x)
head(table)
plot(table$x, table$height)
test <- function(x) x^2 -(2*x) +2
table <- data.frame(x=c(-10:10))
table$height <- test(table$x)
plot(table$x, table$height)
table
test <- function(x) 4(x - 1.5)^(x-1.5)
test(1.6)
test <- function(x) 4(x - 1.5)^(x - 1.5)
test(2)
test <- function(x) 4*(x - 1.5)^(x - 1.5)
test(1.6)
test(1.51)
test(1.501)
test.(1.5001)
test(1.5001)
test(1.5000000001)
shiny::runApp('R/DS_Capstone/shiny')
shiny::runApp('R/DS_Capstone/shiny')
shiny::runApp('R/DS_Capstone/shiny')
shiny::runApp('R/DS_Capstone/shiny')
shiny::runApp('R/DS_Capstone/shiny')
shiny::runApp('R/DS_Capstone/shiny')
shiny::runApp('R/DS_Capstone/shiny')
shiny::runApp('R/DS_Capstone/shiny')
shiny::runApp('R/DS_Capstone/shiny')
View(bigrams)
tail(bigrams)
shiny::runApp('R/DS_Capstone/shiny')
setwd("/Users/kaylinwalker/R/DS_Capstone/shiny")
# Model functions
unigrams <- read.csv("compressed_freq/uniCompress.csv", stringsAsFactors=FALSE)
bigrams <- read.csv("compressed_freq/biCompress.csv", stringsAsFactors=FALSE)
trigrams <- read.csv("compressed_freq/triCompress.csv", stringsAsFactors=FALSE)
quadgrams <- read.csv("compressed_freq/quadCompress.csv", stringsAsFactors=FALSE)
cleanInput <- function(input) {
raw_input <- input
input <- tolower(raw_input)
input <- gsub("[^[:alpha:] ]", "", input)
source('~/.active-rstudio-document', echo=TRUE)
}
source('~/.active-rstudio-document', echo=TRUE)
input <- "When is the game"
nlength <- 3
grams <- trigrams
onelessgrams <- bigrams
if(nlength != 1) { nlength2 <- nlength -2; end <- "\\s"
} else { nlength2 <- 0; end <- "$"}
chunk <- input[[1]][ (length(input[[1]])-nlength2):length(input[[1]]) ]
chunk <- paste(chunk, collapse=" ")
chunk <- gsub("^\\s+|\\s+$", "", chunk)
n <- grams[grep(paste("^", chunk, end, sep=""), grams$word), ]
n
chunk
input <- cleanInput(input)
if(nlength != 1) { nlength2 <- nlength -2; end <- "\\s"
} else { nlength2 <- 0; end <- "$"}
chunk <- input[[1]][ (length(input[[1]])-nlength2):length(input[[1]]) ]
chunk <- paste(chunk, collapse=" ")
chunk <- gsub("^\\s+|\\s+$", "", chunk)
n <- grams[grep(paste("^", chunk, end, sep=""), grams$word), ]
n
if (dim(n)[1]>=20) n <- n[1:20, ]
predicted <- t(as.data.frame(strsplit(n$word, " ")))[,nlength]
predicted
pp <- cbind(predicted, rep(0, length(predicted)))
pp
row.names(pp) <- NULL
pp
for (g in 1:length(pp[,1])) {
x <- unigrams[grep(paste("^", pp[g,1], "$", sep=""), unigrams$word), 2]
if (length(x)!=0) {
pp[g, 2] <- x
} else {  }
}
pp
m <- onelessgrams[grep(paste("^", chunk, "$", sep=""), onelessgrams$word), ]
m
n$prob <- n$freq/m$freq[1]
n
n
input <- "when are we leaving for"
mostLikely(input)
input <- "so nice to meet"
input <- cleanInput(input)
if(nlength != 1) { nlength2 <- nlength -2; end <- "\\s"
} else { nlength2 <- 0; end <- "$"}
chunk <- input[[1]][ (length(input[[1]])-nlength2):length(input[[1]]) ]
chunk <- paste(chunk, collapse=" ")
chunk <- gsub("^\\s+|\\s+$", "", chunk)
n <- grams[grep(paste("^", chunk, end, sep=""), grams$word), ]
if (dim(n)[1]>=20) n <- n[1:20, ]
if (dim(n)[1]!=0) {
# get predicted word counts
predicted <- t(as.data.frame(strsplit(n$word, " ")))[,nlength]
pp <- cbind(predicted, rep(0, length(predicted)))
row.names(pp) <- NULL
for (g in 1:length(pp[,1])) {
x <- unigrams[grep(paste("^", pp[g,1], "$", sep=""), unigrams$word), 2]
if (length(x)!=0) {
pp[g, 2] <- x
} else {  }
}
# get w i-1 count
m <- onelessgrams[grep(paste("^", chunk, "$", sep=""), onelessgrams$word), ]
n$prob <- n$freq/m$freq[1]
}
input <- cleanInput(input)
if(nlength != 1) { nlength2 <- nlength -2; end <- "\\s"
} else { nlength2 <- 0; end <- "$"}
chunk <- input[[1]][ (length(input[[1]])-nlength2):length(input[[1]]) ]
chunk <- paste(chunk, collapse=" ")
chunk <- gsub("^\\s+|\\s+$", "", chunk)
n <- grams[grep(paste("^", chunk, end, sep=""), grams$word), ]
if (dim(n)[1]>=20) n <- n[1:20, ]
if (dim(n)[1]!=0) {
# get predicted word counts
predicted <- t(as.data.frame(strsplit(n$word, " ")))[,nlength]
pp <- cbind(predicted, rep(0, length(predicted)))
row.names(pp) <- NULL
for (g in 1:length(pp[,1])) {
x <- unigrams[grep(paste("^", pp[g,1], "$", sep=""), unigrams$word), 2]
if (length(x)!=0) {
pp[g, 2] <- x
} else {  }
}
# get w i-1 count
m <- onelessgrams[grep(paste("^", chunk, "$", sep=""), onelessgrams$word), ]
n$prob <- n$freq/m$freq[1]
}
input <- cleanInput(input)
if(nlength != 1) { nlength2 <- nlength -2; end <- "\\s"
} else { nlength2 <- 0; end <- "$"}
chunk <- input[[1]][ (length(input[[1]])-nlength2):length(input[[1]]) ]
chunk <- paste(chunk, collapse=" ")
chunk <- gsub("^\\s+|\\s+$", "", chunk)
n <- grams[grep(paste("^", chunk, end, sep=""), grams$word), ]
if (dim(n)[1]>=20) n <- n[1:20, ]
predicted <- t(as.data.frame(strsplit(n$word, " ")))[,nlength]
pp <- cbind(predicted, rep(0, length(predicted)))
row.names(pp) <- NULL
for (g in 1:length(pp[,1])) {
x <- unigrams[grep(paste("^", pp[g,1], "$", sep=""), unigrams$word), 2]
if (length(x)!=0) {
pp[g, 2] <- x
} else {  }
}
# get w i-1 count
m <- onelessgrams[grep(paste("^", chunk, "$", sep=""), onelessgrams$word), ]
n$prob <- n$freq/m$freq[1]
n
cleanInput(input)
input
input <- "so nice to meet"
cleanInput(input)
chunk <- input[[1]][ (length(input[[1]])-nlength2):length(input[[1]]) ]
chunk <- paste(chunk, collapse=" ")
chunk <- gsub("^\\s+|\\s+$", "", chunk)
chunk
n <- grams[grep(paste("^", chunk, end, sep=""), grams$word), ]
n
if(nlength != 1) { nlength2 <- nlength -2; end <- "\\s"
} else { nlength2 <- 0; end <- "$"}
chunk <- input[[1]][ (length(input[[1]])-nlength2):length(input[[1]]) ]
chunk <- paste(chunk, collapse=" ")
chunk <- gsub("^\\s+|\\s+$", "", chunk)
chunk
input <- cleanInput(input)
if(nlength != 1) { nlength2 <- nlength -2; end <- "\\s"
} else { nlength2 <- 0; end <- "$"}
chunk <- input[[1]][ (length(input[[1]])-nlength2):length(input[[1]]) ]
chunk <- paste(chunk, collapse=" ")
chunk <- gsub("^\\s+|\\s+$", "", chunk)
shiny::runApp()
n
n <- grams[grep(paste("^", chunk, end, sep=""), grams$word), ]
n
predicted <- t(as.data.frame(strsplit(n$word, " ")))[,nlength]
pp <- cbind(predicted, rep(0, length(predicted)))
row.names(pp) <- NULL
for (g in 1:length(pp[,1])) {
x <- unigrams[grep(paste("^", pp[g,1], "$", sep=""), unigrams$word), 2]
if (length(x)!=0) {
pp[g, 2] <- x
} else {  }
}
# get w i-1 count
m <- onelessgrams[grep(paste("^", chunk, "$", sep=""), onelessgrams$word), ]
n$prob <- n$freq/m$freq[1]
n$lastCount <- as.numeric(pp[,2])
n
pp
delta <- 0.796
for (f in 1:length(n[,1])) {
n$pKN[f] <- (max(n$freq[f] - delta, 0) / m$freq[1]) + (delta/m$freq[1]) * n$freq[f] * ( n$lastCount[f] / dim(bigrams)[1])
}
n
howMany <- 1
m4 <- match(input, 4, quadgrams, trigrams)
m3 <- match(input, 3, trigrams, bigrams)
m2 <- match(input, 2, bigrams, unigrams)
m4
m3
m2
m
jumble
jumble <- rbind(m4, m3, m2)
jumble
jumble <- jumble[order(-jumble$pKN),]
jumble
m <- onelessgrams[grep(paste("^", chunk, "$", sep=""), onelessgrams$word), ]
m
n
shiny::runApp()
n
m
f <- 1
m$freq[1]
shiny::runApp()
cat("foo\n")
shiny::runApp()
